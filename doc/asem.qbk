[library Boost.asem
    [quickbook 1.5]
    [authors [Morgenstern, Klemens David], [Hodges, Richard]]
    [copyright 2022 Klemens D. Morgenstern, Richard Hodges]
    [id asem]
    [dirname asem]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        http://www.boost.org/LICENSE_1_0.txt)
    ]
]

[section: Summary]
The ASem (async semaphore) library provides synchronization primitives based on asio principles.

The primitives, `barrier`, `mutex`, `semaphore` and `condition_variable` are based 
on common implementations, such as `std::barrier`, `std::mutex`, `std::counting_sempahore` and `std::condition_variable`.

This library is not meant for common asio usage in the application layer, but for implementation of complex composed operations.
That means you should only consider this if an `asio::strand` does not suffice.

The primitives checks the executor whether or not it is operating on a single thread, and chooses thread-protection accordingly.

Moving a primitive while it has pending operations is UB.

[endsection]

[xinclude autodoc.xml]
